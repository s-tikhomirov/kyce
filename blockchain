#!/bin/bash
function join_by { local IFS="$1"; shift; echo "$*"; }

VERBOSITY=3

ACCOUNT_PASSWORDS=(account0 account1 account2)
PASSWORD_FILE=res/password.pass

DATA_DIR=`pwd`/.geth_data/
GETH_PARAMS=(--identity "LuxCryptoNet" --maxpeers 10 --rpc --rpcport "8080" --rpcaddr "0.0.0.0" --rpccorsdomain "*" --datadir $DATA_DIR --port "30303" --nodiscover --rpcapi "db,eth,net,web3,personal" --networkid 1900 --verbosity $VERBOSITY --nat "none")
MINE_PARAMS=(--mine --minerthreads 1)
UNLOCK_PARAMS=(--unlock $(join_by , ${!ACCOUNT_PASSWORDS[@]}) --password res/password.pass)

GENESISFILE=res/genesis.json
LOGFILE=${DATA_DIR}/geth.log
SOLC_HELPER=contracts/solc_helper/solc_helper
CONTRACT_BIN=contracts/bin

PROGRAMNAME=$0

function usage {
    echo "USAGE:"
    echo -e "\t$PROGRAMNAME command"
    echo
    echo "COMMANDS:"
    echo
    echo -e "\t setup   \t Sets up private blockchain chain, includes 'deploy' command"
    echo -e "\t deploy  \t Compiles and deploys contracts "
    echo -e "\t start   \t Starts geth node in the background"
    echo -e "\t restart \t Restarts geth node"
    echo -e "\t stop    \t Stops geth node"
    echo -e "\t attach  \t Attaches to the running geth node"
    echo -e "\t help    \t Displays this message"
    echo
    exit 1
}

function setup {
  killall geth

  echo "Removing old blockchain data"
  rm -rf ${DATA_DIR}

  echo "Setting up test blockchain"
  mkdir -p ${DATA_DIR}

  ALLOCATE=$1
  make_accounts $ALLOCATE
  compile_contracts
}

function make_accounts {
  
  ALLOCATE=$1
  if [ "$ALLOCATE" = true ]; then
    echo 'Ether will be pre-allocated..., copying origin genesis' $GENESISFILE
    cp $GENESISFILE $GENESISFILE.deployed
  fi

  rm -f $PASSWORD_FILE
  for password in ${ACCOUNT_PASSWORDS[@]}; do
    echo "Creating an account with password:" $password
    echo $password > ${password}.tmp
    echo $password >> $PASSWORD_FILE
    ACCOUNT="0x$(geth --datadir $DATA_DIR --password ${password}.tmp account new | cut -d "{" -f2 | cut -d "}" -f1)"
    rm ${password}.tmp
    echo "New account created:" $ACCOUNT

    if [ "$ALLOCATE" = true ]; then
      echo -e "\tAllocating ether..."
      jq '.alloc += { '\"${ACCOUNT}\"' : { "balance": "20000000000000000000" } }' $GENESISFILE.deployed > tmp && mv tmp $GENESISFILE.deployed
    fi
  
  done
 
  echo 'Initializing devnet with genesis' $GENESISFILE.deployed
  geth "${GETH_PARAMS[@]}" init $GENESISFILE.deployed
}

function compile_contract {
  CONTRACT_NAME=$1
  CONTRACT_SRC=$2
  OUTPUT_DEPLOYMENT_SCRIPT=$3
  ARGS=$4
  if [ -z "${ARGS}" ]; then
    echo 'Args are not set, defaulting to null'
    ARGS=null
  fi

  $SOLC_HELPER \
    --contract $CONTRACT_NAME \
    --gas 3000000 \
    --args $ARGS \
    --value 0 \
    --output $OUTPUT_DEPLOYMENT_SCRIPT \
    $CONTRACT_SRC
}

function compile_contracts {
  mkdir -p $CONTRACT_BIN
  rm -r $CONTRACT_BIN/*

  echo "Compiling contract..."
  EXCHANGE_SC_SRC=contracts/Exchange.sol
  KYCTOKEN_SC_SRC=contracts/Tokens.sol

  compile_contract Exchange $EXCHANGE_SC_SRC $CONTRACT_BIN/exchange_deploy.js
  compile_contract KYC $KYCTOKEN_SC_SRC $CONTRACT_BIN/kyc_deploy.js 0x0
}

function start {
  echo "Starting geth in background"
  nohup  geth "${GETH_PARAMS[@]}" "${MINE_PARAMS[@]}" "${UNLOCK_PARAMS[@]}" &> $LOGFILE&
}

function create_instantiation_script {
  CONTRACT=$(basename $1 | cut -d_ -f1 )
  CONTRACT_ABI=${CONTRACT_BIN}/${CONTRACT}_deploy_abi.js
  CONTRACT_ABI_VAR=$(cat $CONTRACT_ABI | grep -o "\w*Compiled\w*")  
  CONTRACT_INST_VAR=$(echo ${CONTRACT_ABI_VAR} | sed 's/Compiled*//')
  CONTRACT_ABI_VAR=${CONTRACT_ABI_VAR}.${CONTRACT_INST_VAR}.abi
  CONTRACT_INST_SCRIPT=${CONTRACT_BIN}/${CONTRACT}_inst.js
  CONTRACT_INST_MODULE=${CONTRACT_BIN}/${CONTRACT}.js
  CONTRACT_INST_SCRIPT_CODE="var ${CONTRACT_INST_VAR} = eth.contract(${CONTRACT_ABI_VAR})"
  
  CONTRACT_ABI="{$(cat ${CONTRACT_ABI} | cut -d{ -f2- | cut -d";" -f1)"
  CONTRACT_ABI="$(echo ${CONTRACT_ABI} | jq ".${CONTRACT_INST_VAR}.abi")"
  CONTRACT_INST_VAR="${CONTRACT_INST_VAR} = exports.${CONTRACT_INST_VAR}"
  CONTRACT_INST_MODULE_CODE="var ${CONTRACT_INST_VAR} = function(web3){return web3.eth.contract(${CONTRACT_ABI})"

  if [ ! -z ${2} ]; then
    CONTRACT_INST_SCRIPT_CODE="${CONTRACT_INST_SCRIPT_CODE}.at(\"${2}\")"
    CONTRACT_INST_MODULE_CODE="${CONTRACT_INST_MODULE_CODE}.at(\"${2}\")"
  fi

  echo "${CONTRACT_INST_SCRIPT_CODE}" > $CONTRACT_INST_SCRIPT
  echo "${CONTRACT_INST_MODULE_CODE};};" > $CONTRACT_INST_MODULE

  echo "  Contract instantiation script created at ${CONTRACT_INST_SCRIPT}"
  echo "  Contract instantiation module created at ${CONTRACT_INST_MODULE}"

}

function deploy {
  compile_contracts

  echo "Deploying all contracts from $CONTRACT_BIN"
  for FILE in $CONTRACT_BIN/*_deploy.js; do
    echo -e "Deploying $FILE"
    
    ADDRESS=$(geth "${GETH_PARAMS[@]}" "${MINE_PARAMS[@]}" "${UNLOCK_PARAMS[@]}" \
     js $FILE 2>$LOGFILE | grep "Contract mined! Address" | cut -d: -f2
    )

    if [ -z $ADDRESS ]; then
      echo "  Deploying failed. Is node NOT running and init?";
    else
      echo "  Address is" $ADDRESS
    fi
    create_instantiation_script $FILE $ADDRESS
  done
}

if [[ $1 == "setup" ]]; then
  ALLOCATE=true
  setup $ALLOCATE
  deploy
  start
elif [[ $1 == "attach" ]]; then
  echo "Attaching to session..."
  geth "${GETH_PARAMS[@]}" attach ipc://$DATA_DIR/geth.ipc
elif [[ $1 == "start" ]]; then
  start
elif [[ $1 == "restart" ]]; then
  killall geth && start
elif [[ $1 == "stop" ]]; then
  killall geth
elif [[ $1 == "deploy" ]]; then
  killall geth
  deploy
elif [[ $1 == "help" ]]; then
  usage
elif [[ $1 == "join" ]]; then
  ALLOCATE=false
  setup $ALLOCATE
  deploy
  start
else
  usage
fi
